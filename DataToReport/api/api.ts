/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping the server
         * @description Check if the server is running.
         */
        get: operations["Ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Login */
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Register */
        post: operations["Register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update User */
        put: operations["PutUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Format: int64 */
        id: number;
        email: string;
        password: string;
        name: string;
        putUser: {
            id: components["schemas"]["id"];
            email?: components["schemas"]["email"];
            password?: components["schemas"]["password"];
            name?: components["schemas"]["name"];
        };
        putUserResponse: {
            id: components["schemas"]["id"];
            name?: components["schemas"]["name"];
        };
    };
    responses: {
        /** @description Internal Server Error */
        internalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: string;
                };
            };
        };
        /** @description Bad Request */
        badRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is running */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @default pong */
                        message: string;
                    };
                };
            };
            default: components["responses"]["internalServerError"];
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: int64 */
                    user_id: number;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    "Set-Cookie": string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["badRequest"];
            default: components["responses"]["internalServerError"];
        };
    };
    Register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: int64 */
                    user_id: number;
                    password: string;
                    name: string;
                    email: string;
                };
            };
        };
        responses: {
            /** @description Register successful */
            200: {
                headers: {
                    "Set-Cookie": string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["badRequest"];
            default: components["responses"]["internalServerError"];
        };
    };
    PutUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["putUser"];
            };
        };
        responses: {
            /** @description Update Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["putUserResponse"];
                };
            };
            400: components["responses"]["badRequest"];
            default: components["responses"]["internalServerError"];
        };
    };
}
